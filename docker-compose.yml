version: '3'
services:
  backend:
    build: ./backend
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app   # Синхронізуємо весь код бекенду
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    command: sh -c "npm run build && npm run start:dev"
    ports:
      - "5000:5000"
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
          test: [ "CMD", "curl", "-f", "http://localhost:5000/api/docs" ]
          interval: 30s
          timeout: 5s
          retries: 5
#_____________________________________________________________________
  frontend:
    ports: # Для розробки
      - "3000:3000"
    build: ./frontend
    volumes:
      - ./frontend:/app  # Синхронізуємо весь код фронтенду
      - /app/node_modules
    command: sh -c "npm run build && npm run watch"
    environment:
        - WATCHPACK_POLLING=true
    depends_on:
     backend:
        condition: service_healthy
#_____________________________________________________________________
  mongo:
    image: mongo
    env_file:
      - ./backend/.env
    volumes:
      - mongo-data:/data/db
    command: mongod --quiet  # Запускаємо mongo без логів
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.runCommand({ ping: 1 }).ok' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
#______________________________________________________________________
  web:
      build:
        context: .
        dockerfile: web/Dockerfile
      ports:
        - "80:80"
      volumes:
        - ./nginx.conf:/etc/nginx/conf.d/default.conf
        - ./frontend/dist:/usr/share/nginx/html
      depends_on:
        - backend
        - frontend
      command: sh -c "nginx -g 'daemon off;' & while inotifywait -r -e modify,create,delete /usr/share/nginx/html; do nginx -s reload; done"
      restart: on-failure
volumes:
  mongo-data: